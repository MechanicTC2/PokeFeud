<!DOCTYPE html>
<html>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
    <style>/* The Modal (background) */
        .modal {
          display: none; /* Hidden by default */
          position: fixed; /* Stay in place */
          z-index: 100; /* Sit on top */
          left: 0;
          top: 0;
          width: 100%; /* Full width */
          height: 100%; /* Full height */
          overflow: auto; /* Enable scroll if needed */
          margin-top: 390px;
          margin-bottom: 0px;
        }
        
        /* Modal Content/Box */
        .modal-content {
          background-color: #fefefe;
          margin: 15% auto; /* 15% from the top and centered */
          padding: 20px;
          border: 1px solid #888;
          margin-bottom: 50px;
          width: 80%; /* Could be more or less, depending on screen size */
        }
        .close {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
}

.close:hover,
.close:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}
.closeopp {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
}

.closeopp:hover,
.closeopp:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}
</style>
    <body style = "width: 100%; height: 100%; background-image: url(/images/fightBackground_new.png);">
        <embed src="/music/music.mp3" loop="true" autostart="true" width="0" height="0">
        <center><h1 style = "font-size: 50px;"><%= title %></h1></center>
		<div style="position: absolute; left: 76%; color: #6e0b0b">
			<h1 id="opponent"><%=team2%></h1>
			<b id="opponentHealth">Health: <%=pokemon[team2].hp %></b>
		</div>
        <center>
        <div class="animationContainer" style = "position: relative; z-index: 0; top: 50%; left: 50%">
        </center>
        <center>
        <img src = "/images/backgrounds/bg-beach.jpg" style = "width: 50%; height: 50%; z-index:-2">
        <img src = "/images/back/<%= team1 %>.png" id = "bsprite" style = "position: absolute; top: 47%; left: 25%; width: 20%; aspect-ratio: 1/1;">
        <img src = "/images/front/<%= team2 %>.png" id = "osprite" style = "position: absolute; top: 15%; left: 55%; width: 20%; aspect-ratio: 1/1;">
        </div>
        </center>
        <center>
        <div class = "inter">
            <h1 id="action-text">What will you do?</h1>
        <div class = "button-container">
            <button class="move" id="move1" onclick="myMove(0); " style = " width:10%; aspect-ratio: 5/3; font-size: 17px"><%= playModel.getMoves(team1, 0) %></button>
            <button class="move" id="move2" onclick="myMove(1); " style = " width:10%; aspect-ratio: 5/3; font-size: 17px"><%= playModel.getMoves(team1, 1) %></button>
            <button class="move" id="move3" onclick="myMove(2); " style = " width:10%; aspect-ratio: 5/3; font-size: 17px"><%= playModel.getMoves(team1, 2) %></button>
            <button class="move" id="move4" onclick="myMove(3); " style = " width:10%; aspect-ratio: 5/3; font-size: 17px;"><%= playModel.getMoves(team1, 3) %></button>
        </div>
        </div>
        </center>
		<div style = "position: absolute; bottom: 25%; left: 13%; color: #0a0a94; text-emphasis-color: white;">
			<h1 id="player"><%=team1%></h1>
			<b id="playerHealth">Health: <%=pokemon[team1].hp%></b>
		</div>
        <div id = "hpbg1" style = "height: 26px; width: 263px; position: absolute; left: 76%; top: 35.5%; background-color: gray; color: green; border-color: black;"></div>
        <div id = "hp1" style = "height: 20px; width: 250px; position: absolute; left: 76.5%; top: 36%; background-color: green; color: green; border-color: black;"></div>
        <div id = "hpbg2" style = "height: 26px; width: 263px; position: absolute; left: 9.5%; top: 78.5%; background-color: gray; color: green; border-color: black;"></div>
        <div id = "hp2" style = "height: 20px; width: 250px; position: absolute; left: 10%; top: 79%; background-color: green; color: green; border-color: black;" ></div>
    </body>

    <!-- The Modal -->
    <div id="myModal" class="modal" style = "z-index: 1000;">
    
      <!-- Modal content -->
      <div class="modal-content">
        <button style="display: none" class="close" id = "close">CLOSE</button>
        <p id = "mod" style = "color: #0a0a94; font-weight: bold; font-size: 25px;"></p>
      </div>
    
    </div>
    <div id="myModalopp" class="modal">
    
        <!-- Modal content -->
        <div class="modal-content">
          <button style="display: none;" class="closeopp" id = closeopp >CLOSE</button>
          <p id = "modopp" style = "color: #6e0b0b; font-weight: bold; font-size: 25px;"></p>
        </div>
      
      </div>
</html>
<script>
    let player = '<%=team1%>';
    let opponent = '<%=team2%>';
    let thing = document.getElementById("close");
    let modal = document.getElementById("myModal");
    let thingopp = document.getElementById("closeopp");
    let modalopp = document.getElementById("myModalopp");
    let playerHp = (<%=pokemon[team1].hp%> * 5)  ;
    let opponentHp = (<%=pokemon[team2].hp%> * 5);
    document.getElementById("playerHealth").innerHTML = playerHp + " / " + playerHp;
    document.getElementById("opponentHealth").innerHTML = opponentHp + " / " + opponentHp;
        //new
    //    let playerDamage = ((<%=pokemon[team1].attack%>)+(<%=pokemon[team1].special_attack%>))/2;
       // let opponentDamage = Math.sqrt((<%=pokemon[team2].attack%>)*(<%=pokemon[team2].special_attack%>))*1.1;
       // console.log("player damage is:"+playerDamage);
       let pdef = ((<%=pokemon[team1].defense%>)+(<%=pokemon[team1].special_defense%>))/2;
       let odef = ((<%=pokemon[team2].defense%>)+(<%=pokemon[team2].special_defense%>))/2;
    function updateOpponent(damage){
        document.getElementById("opponentHealth").innerHTML = Math.ceil(document.getElementById("opponentHealth").innerHTML.split("/")[0]-damage)+ " / " + opponentHp;
        document.getElementById("hp1").style.width = document.getElementById("opponentHealth").innerHTML.split("/")[0]/opponentHp *250 + "px";
        if(document.getElementById("opponentHealth").innerHTML.split("/")[0] <= 0){
            window.location = '../win'
        }
    }
    function updatePlayer(damage){
        document.getElementById("playerHealth").innerHTML = Math.ceil( document.getElementById("playerHealth").innerHTML.split("/")[0]-damage) +" / " + playerHp ;
        document.getElementById("hp2").style.width = document.getElementById("playerHealth").innerHTML.split("/")[0]/playerHp *250 + "px";
        displayopp(damage);
        if(document.getElementById("playerHealth").innerHTML.split("/")[0] <= 0){
            window.location = '../lose'
        }
    }
    async function playsound(){
        var audio = new Audio('/music/move.mp3');
        audio.play();
    }
    function displayplayer(dam, num, crit){
        if(crit > 1){
        mod.innerHTML = "<%=team1%>" + " used " + document.getElementById("move" + num).innerHTML + "!" +"\n" + " It CRITICAL HIT for "  + dam + " damage!"
        }else if(crit === 1){
            mod.innerHTML = "<%=team1%>" + " used " + document.getElementById("move" + num).innerHTML + "!" +"\n" + " It did "  + dam + " damage!"
        }else{
            mod.innerHTML = "<%=team1%>" + " used " + document.getElementById("move" + num).innerHTML + "!" +"\n" + " It did "  + dam + " damage!"
        }
        modal.style.display = "block"
    }
    function displayopp(dam, crit){
      if(crit === false){
        modopp.innerHTML ="<%=team2%>" + " attacked <%=team1%> for " + dam + " damage!"
      }else if(crit === true){
        modopp.innerHTML ="<%=team2%>" + " CRITICAL HIT <%=team1%> for " + dam + " damage!"
      }else{
        modopp.innerHTML ="<%=team2%>" + " attacked <%=team1%> for " + dam + " damage!"
      }
        modalopp.style.display = "block"
    }
    thing.onclick = function(){
        modal.style.display = "none";
        thing.style.display = "none";
        enemyMove();
    }    
    thingopp.onclick = function(){
        modalopp.style.display = "none"
        thingopp.style.display = "none";
    }
     function myMove(num) {
        let damage = 0;
        let crit = 0;
        let res;
        if(num === 0 ){
         res =  (<%-playModel.calcDamage(team1,team2,playModel.getMoves(team1, 0))%>).toString()
         console.log(res)
         res = res.toString().split("&");
         damage = res[0];
         crit = res[1];
         console.log(res)
         console.log(damage)
         console.log(crit)
        }else if(num === 1){
         res =  (<%-playModel.calcDamage(team1,team2,playModel.getMoves(team1, 1))%>).toString()
         res = res.toString().split("&");
         damage = res[0];
         crit = res[1];
        }else if(num === 2){
         res =  (<%-playModel.calcDamage(team1,team2,playModel.getMoves(team1, 2))%>).toString()
         res = res.toString().split("&");
         damage = res[0];
         crit = res[1];
        }else if(num === 3){
            res =  (<%-playModel.calcDamage(team1,team2,playModel.getMoves(team1, 3))%>).toString()
            res = res.toString().split("&");
            damage = res[0];
            crit = res[1];
         }else{
                damage = 0;
         }
        let id = null;
        let id2 = null;
        let closeButton = document.getElementById("close");
        let closeButton2 = document.getElementById("closeopp");
        let elem = document.getElementById("bsprite");
        let elem2 = document.getElementById("osprite");
        let posX = elem.offsetLeft;
        let posY = elem.offsetTop;
        let posX2 = elem2.offsetLeft;
        let posY2 = elem2.offsetTop;
        let incrementalX = (posX2-posX)/100;
        let incrementalY = (posY-posY2)/100;
        elem2.style.left = posX2 + 'px';
        elem2.style.top = posY2 + 'px';
        elem.style.zIndex = 1000;
        elem2.style.zIndex = 100;
        clearInterval(id);
        clearInterval(id2);
        damage = Math.ceil(damage/1.4 + 20)
        displayplayer(damage, num +1, crit)
        id = setInterval(frame, 10);
        function frame() {
            if (parseInt(elem.style.left.substring(0,3))>=770) {
                playsound()
                clearInterval(id);
                id2 = setInterval(frameBack, 10);
                updateOpponent(damage)
            } else {
                posX+=incrementalX;
                posY-=incrementalY;
                elem.style.left = posX + 'px';
                elem.style.top = posY + 'px';
            }
        }
    
        function frameBack(){
            if (parseInt(elem.style.left.substring(0,3))<=334) {
                clearInterval(id2);
                closeButton.style.display = "block";
            } else {
                posX-=incrementalX;
                posY+=incrementalY;
                elem.style.left = posX + 'px';
                elem.style.top = posY + 'px';
            }
        }
    }
    function enemyMove(damage){
        let id = null;
        let id2 = null;
        let closeButton = document.getElementById("close");
        let closeButton2 = document.getElementById("closeopp");
        let elem = document.getElementById("bsprite");
        let elem2 = document.getElementById("osprite");
        let posX = elem.offsetLeft;
        let posY = elem.offsetTop;
        let posX2 = elem2.offsetLeft;
        let posY2 = elem2.offsetTop;
        let incrementalX = (posX2-posX)/100;
        let incrementalY = (posY-posY2)/100;
        let crit = false
        let opponentDamage = 100000
        console.log(Math.floor(Math.random() * 100))
        if(Math.floor(Math.random() * 100) <= 3){
          crit = true
           opponentDamage = Math.floor( (Math.ceil((((<%=pokemon[team2].attack%>+<%=pokemon[team2].special_attack%>)/2) *(Math.random() +2) +50)))*(Math.ceil((((<%=pokemon[team2].attack%>+<%=pokemon[team2].special_attack%>)/2) *(7) + 20)))*10);
        }else{
          opponentDamage =Math.floor( (Math.ceil((((<%=pokemon[team2].attack%>+<%=pokemon[team2].special_attack%>)/2) *(Math.random() +0.725) +17)))*(Math.ceil((((<%=pokemon[team2].attack%>+<%=pokemon[team2].special_attack%>)/2) *(+0.725))))/pdef);
        }
        elem2.style.left = posX2 + 'px';
        elem2.style.top = posY2 + 'px';
        elem.style.zIndex = 100;
        elem2.style.zIndex = 1000;
        clearInterval(id);
        clearInterval(id2);
        displayopp(opponentDamage, crit);
        id = setInterval(frame2, 10);
        function frame2() {
            if (parseInt(elem2.style.left.substring(0,3))<=334) {
                playsound()
                clearInterval(id);
                id2 = setInterval(frameBack2, 10);
                updatePlayer(opponentDamage);
            } else {
                posX2-=incrementalX;
                posY2+=incrementalY;
                elem2.style.left = posX2 + 'px';
                elem2.style.top = posY2 + 'px';
            }
        }
        function frameBack2(){
            if (parseInt(elem2.style.left.substring(0,3))>=800) {
                clearInterval(id2);
                closeButton2.style.display = "block";
            } else {
                posX2+=incrementalX;
                posY2-=incrementalY;
                elem2.style.left = posX2 + 'px';
                elem2.style.top = posY2 + 'px';
            }
        }  
    }
    function calcDamage(pokemon1, pokemon2, move) {
	try {
		const ATK_POKEMON_INFO = pokemon[pokemon1];
		const DEF_POKEMON_INFO = pokemon[pokemon2];
		const MOVE_INFO = moves[pokemon1].moveset[move];
		const CATEGORY = MOVE_INFO.category == "Special" ? true : false;
		const ATK = (CATEGORY == true ? ATK_POKEMON_INFO.special_attack : ATK_POKEMON_INFO.attack);
		const DEF =  (CATEGORY == true ? DEF_POKEMON_INFO.special_defense : DEF_POKEMON_INFO.defense);
		debug.log("==========\natk: " + ATK + "\ndef: " + DEF);
		const LEVEL = 100;
		const CRITICAL = Math.floor(Math.random() * 255) < ATK_POKEMON_INFO.speed / 2 ? ((2 * LEVEL) + 5) / (LEVEL + 5) : 1;
		debug.log(CRITICAL == 1 ? "no crit" : "CRITICAL HIT");
		const RANDOM = Math.floor(Math.random() * 39 + 217) / 255;
		const MOVE_TYPE = MOVE_INFO.type.charAt(0).toLowerCase() + MOVE_INFO.type.slice(1);
		const DEF_POKEMON_TYPE_1 = pokemon_type[pokemon2][0];
		const DEF_POKEMON_TYPE_2 = pokemon_type[pokemon2][1];
		const EFFECTIVE_1 = isEffective(MOVE_TYPE, DEF_POKEMON_TYPE_1);
		debug.log("type effective vs 1: " + EFFECTIVE_1);
		let EFFECTIVE_2;
		if (DEF_POKEMON_TYPE_2 !== "undefined")
			EFFECTIVE_2 = isEffective(MOVE_TYPE, DEF_POKEMON_TYPE_2);
		debug.log("type effective vs 2: " + EFFECTIVE_2);
		const STAB_1 = (pokemon_type[pokemon1][0] == MOVE_TYPE ? 1.5 : 1);
		let STAB_2;
		if (pokemon_type[pokemon1][1] !== "undefined")
			STAB_2 = (pokemon_type[pokemon1][1] == MOVE_TYPE ? 1.5 : 1)
		let damage = ((((2 * LEVEL * CRITICAL) / 5 + 2) * MOVE_INFO.power * (ATK/DEF)) / 50) + 2;
		damage *= RANDOM * EFFECTIVE_1 * EFFECTIVE_2 * STAB_1 * STAB_2;
		damage = Math.floor(damage);
		debug.log("damage: " + damage + "\n==========");
		return damage;
	}
    catch (err) {
		debug.log(err);
	}
}
        </script>

